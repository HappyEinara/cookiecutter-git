from cookiecutter.environment import StrictEnvironment as StrictEnvironment
from cookiecutter.exceptions import ContextDecodingException as ContextDecodingException, FailedHookException as FailedHookException, NonTemplatedInputDirException as NonTemplatedInputDirException, OutputDirExistsException as OutputDirExistsException, UndefinedVariableInTemplate as UndefinedVariableInTemplate
from cookiecutter.find import find_template as find_template
from cookiecutter.hooks import run_hook as run_hook
from cookiecutter.utils import make_sure_path_exists as make_sure_path_exists, rmtree as rmtree, work_in as work_in
from typing import Any, Optional

logger: Any

def is_copy_only_path(path: Any, context: Any): ...
def apply_overwrites_to_context(context: Any, overwrite_context: Any) -> None: ...
def generate_context(context_file: str = ..., default_context: Optional[Any] = ..., extra_context: Optional[Any] = ...): ...
def generate_file(project_dir: Any, infile: Any, context: Any, env: Any, skip_if_file_exists: bool = ...) -> None: ...
def render_and_create_dir(dirname: Any, context: Any, output_dir: Any, environment: Any, overwrite_if_exists: bool = ...): ...
def ensure_dir_is_templated(dirname: Any): ...
def generate_files(repo_dir: Any, context: Optional[Any] = ..., output_dir: str = ..., overwrite_if_exists: bool = ..., skip_if_file_exists: bool = ...): ...
